---
import Layout from "../layouts/Layout.astro";
---

<script>
	import { loop, useWebGLCanvas } from "usegl";

	// Set up geometry
	const count = 1000;
	const positions = [];
	const indices = [];

	// Fibonacci sphere points
	function fibonacciSpherePoint(index: number, totalPoints: number) {
		const phi = Math.acos(1 - (2 * index) / totalPoints);
		const theta = Math.sqrt(totalPoints * Math.PI) * phi;

		const x = Math.cos(theta) * Math.sin(phi);
		const y = Math.sin(theta) * Math.sin(phi);
		const z = Math.cos(phi);

		return { x, y, z };
	}

	for (let i = 0; i < count; i++) {
		const { x, y, z } = fibonacciSpherePoint(i, count);
		positions.push(x, y, z);
		indices.push(i);
	}

	const { uniforms } = useWebGLCanvas({
		canvas: "#glCanvas",
		fragment: /* glsl */ `
			varying vec4 vColor;
			void main(){
					gl_FragColor = vColor;
			}
		`,
		vertex: /* glsl */ `
			attribute vec3 aPosition;
			attribute float index;
			uniform float uThreshold;
			uniform float uTime;
			varying vec4 vColor;

			mat4 rotateY(float angle) {
				return mat4(
					cos(angle), 0., sin(angle), 0.,
					0., 1., 0., 0.,
					-sin(angle), 0., cos(angle), 0.,
					0., 0., 0., 1.
				);
			}

			void main(){
				vColor = vec4(0.41, 0.84, 0.98, floor(index / uThreshold));
				gl_Position = vec4(aPosition * .6, 1.0) * rotateY(uTime / 10.);
				gl_PointSize = (2. - gl_Position.z) / .5 + 4.;
			}
		`,
		uniforms: {
			uThreshold: 0,
		},
		attributes: {
			aPosition: {
				data: positions,
				size: 3,
			},
			index: {
				data: indices,
				size: 1,
			},
		},
	});

	let direction = 1;

	loop(() => {
		uniforms.uThreshold += (count * direction) / 500;

		if (uniforms.uThreshold > count || uniforms.uThreshold < 1) {
			direction = -direction;
		}
	});
</script>

<Layout title="Particles">
	<canvas id="glCanvas"></canvas>
</Layout>
