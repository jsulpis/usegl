---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import { useWebGLContext, useLoop, usePingPongFBO, useWebGLCanvas } from "usegl";
  import { incrementRenderCount } from "../../components/renderCount";
  import {
    boidsPositions,
    boidsVelocities,
    renderPassVertex,
    renderPassFragment,
  } from "../../shaders/boids";

  const { gl, canvas } = useWebGLContext("#glCanvas");

  const numParticles = 300;

  const velocities = usePingPongFBO(gl, {
    fragment: boidsVelocities,
    uniforms: {
      uDeltaTime: 0,
      uPerceptionRadius: 0.1,
      uMaxSpeed: 0.4,
      uSeparationWeight: 1.5,
      uAlignmentWeight: 1.0,
      uCohesionWeight: 0.8,
      uBorderForce: 1,
      uBorderDistance: 0.8,
      tPositions: () => positions.outputTexture,
    },
    dataTexture: {
      name: "tVelocities",
      initialData: Array.from({ length: numParticles }).flatMap(() => [
        Math.random() * 0.2 - 0.1,
        Math.random() * 0.2 - 0.1,
        0,
        0,
      ]),
    },
  });

  const positions = usePingPongFBO(gl, {
    fragment: boidsPositions,
    uniforms: {
      uDeltaTime: 0,
      tVelocities: () => velocities.outputTexture,
    },
    dataTexture: {
      name: "tPositions",
      initialData: Array.from({ length: numParticles }).flatMap(() => [
        Math.random() * 2 - 1,
        Math.random() * 2 - 1,
        0,
        0,
      ]),
    },
  });

  const renderPass = useWebGLCanvas({
    canvas,
    vertex: renderPassVertex,
    fragment: renderPassFragment,
    uniforms: {
      tPositions: () => positions.outputTexture,
    },
    attributes: {
      aCoords: positions.coordsAttribute,
    },
    transparent: true,
  });

  renderPass.onAfterRender(incrementRenderCount);

  renderPass.onCanvasReady(() => {
    useLoop(({ deltaTime }) => {
      velocities.uniforms.uDeltaTime = deltaTime / 500;
      velocities.render();

      positions.uniforms.uDeltaTime = deltaTime / 500;
      positions.render();

      renderPass.render();
    });
  });
</script>

<Layout title="Boids">
  <canvas id="glCanvas"></canvas>
</Layout>
