---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import {
    useWebGLContext,
    useLoop,
    usePingPongFBO,
    useWebGLCanvas,
    createFloatDataTexture,
  } from "usegl";
  import { incrementRenderCount } from "../../components/renderCount";

  const { gl, canvas } = useWebGLContext("#glCanvas");

  const positionsFragment = /* glsl */ `
    uniform float uDeltaTime;
    uniform sampler2D tPositions;
    uniform sampler2D tVelocities;

    in vec2 uv;
    out vec4 fragColor;

    vec2 wrapToRange(vec2 value) {
      vec2 shifted = value + 1.0;
      vec2 wrapped = mod(mod(shifted, 2.0) + 2.0, 2.0);
      return wrapped - 1.0;
    }

    void main() {
      vec2 position = texture(tPositions, uv).xy;
      vec2 velocity = texture(tVelocities, uv).xy;

      fragColor = vec4(wrapToRange(position + velocity * uDeltaTime), 0.0, 0.0);
    }
  `;

  const numParticles = 100;

  const positions = usePingPongFBO(gl, {
    fragment: positionsFragment,
    uniforms: {
      uDeltaTime: 0,
      tVelocities: createFloatDataTexture(
        Array.from({ length: numParticles }).flatMap(() => [
          Math.random() * 0.2 - 0.1,
          Math.random() * 0.2 - 0.1,
          0,
          0,
        ])
      ),
    },
    dataTexture: {
      name: "tPositions",
      initialData: Array.from({ length: numParticles }).flatMap(() => [
        Math.random() * 2 - 1,
        Math.random() * 2 - 1,
        0,
        0,
      ]),
    },
  });

  const renderPass = useWebGLCanvas({
    canvas,
    vertex: `
      uniform sampler2D uPositions;
      in vec2 aCoords;

      void main() {
        gl_Position = vec4(texture2D(uPositions, aCoords).xy, 0, 1);
        gl_PointSize = 20.0;
      }
    `,
    fragment: `
      in vec2 uv;
      out vec4 outColor;

      void main() {
        vec2 uv = gl_PointCoord.xy;
        outColor = vec4(0, 1, .5, smoothstep(0.5, 0.4, length(uv - 0.5)));
      }
    `,
    uniforms: {
      uPositions: () => positions.texture,
    },
    attributes: {
      aCoords: positions.coords,
    },
    transparent: true,
  });

  renderPass.onAfterRender(incrementRenderCount);

  renderPass.onCanvasReady(() => {
    useLoop(({ deltaTime }) => {
      positions.uniforms.uDeltaTime = deltaTime / 500;
      positions.render();
      renderPass.render();
    });
  });
</script>

<Layout title="Particles - FBO">
  <canvas id="glCanvas"></canvas>
</Layout>
