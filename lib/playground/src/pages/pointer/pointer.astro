---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import { usePointerEvents, useWebGLCanvas } from "usegl";
  import { incrementRenderCount } from "../../components/renderCount";

  const canvas = document.querySelector("canvas")!;

  const { uniforms, onAfterRender } = useWebGLCanvas({
    canvas,
    fragment: /* glsl */ `
			varying vec2 vUv;
			uniform vec2 uPointerPosition;
			uniform vec2 uResolution;
			uniform vec3 uCircleColor;

			void main() {
				vec2 uv = (vUv - .5) * uResolution / min(uResolution.x, uResolution.y);
				float dist = distance(uv, uPointerPosition);
				float circleMask = 1. - smoothstep(.099, .101, dist);
				vec3 circle = mix(vec3(0.), uCircleColor, circleMask);
				gl_FragColor = vec4(circle, 1.);
			}
		`,
    uniforms: {
      uPointerPosition: [0, 0],
      uCircleColor: [1, 1, 1],
    },
  });

  usePointerEvents(canvas, {
    move: ({ pointer, canvasCenter, canvasRect }) => {
      uniforms.uPointerPosition = [
        (pointer.x - canvasCenter.x) / Math.min(canvasRect.width, canvasRect.height),
        (canvasCenter.y - pointer.y) / Math.min(canvasRect.width, canvasRect.height),
      ];
    },
    down: () => {
      uniforms.uCircleColor = [1, 0, 0];
    },
    up: () => {
      uniforms.uCircleColor = [1, 1, 1];
    },
  });

  onAfterRender(incrementRenderCount);
</script>

<Layout title="Circle">
  <canvas></canvas>
</Layout>

<style>
  canvas {
    aspect-ratio: 3 / 2;
  }
</style>
