---
import Layout from "../../layouts/Layout.astro";
---

<script>
	import {
		useEffectPass,
		useWebGLContext,
		useCompositor,
		useRenderPass,
		useResizeObserver,
	} from "usegl";
	import {
		fragmentShaderSource,
		vertexShaderSource,
		mipmapFragmentShaderSource,
		blurFragmentShaderSource,
		combineFragmentShaderSource,
	} from "../../shaders/bloom";
	import { incrementRenderCount } from "../../components/renderCount";

	const canvas = document.querySelector("canvas");

	const { gl, setSize: resizeCanvas } = useWebGLContext(canvas);

	const positions: number[] = [];
	const particleCount = 100;

	const squareSize = Math.sqrt(particleCount) / 2;
	for (let i = 0; i < squareSize; i++) {
		for (let j = 0; j < squareSize; j++) {
			positions.push(i / squareSize);
			positions.push(j / squareSize);
			positions.push(-i / squareSize);
			positions.push(-j / squareSize);
			positions.push(i / squareSize);
			positions.push(-j / squareSize);
			positions.push(-i / squareSize);
			positions.push(j / squareSize);
		}
	}

	const particlesPass = useRenderPass(gl, {
		fragment: fragmentShaderSource,
		vertex: vertexShaderSource,
		attributes: {
			a_position: {
				data: positions,
				size: 2,
			},
		},
	});

	const mipmapsPass = useEffectPass({
		fragment: mipmapFragmentShaderSource,
	});

	const horizontalBlurPass = useEffectPass({
		fragment: blurFragmentShaderSource,
		uniforms: {
			u_direction: [1, 0],
		},
	});

	const verticalBlurPass = useEffectPass({
		fragment: blurFragmentShaderSource,
		uniforms: {
			u_direction: [0, 1],
		},
	});

	const combinePass = useEffectPass({
		fragment: combineFragmentShaderSource,
		uniforms: {
			u_image: () => particlesPass.target.texture,
			u_bloomTexture: () => verticalBlurPass.target.texture,
		},
	});

	const compositor = useCompositor(gl, particlesPass, [
		mipmapsPass,
		horizontalBlurPass,
		verticalBlurPass,
		combinePass,
	]);

	useResizeObserver(canvas, ({ devicePixelSize }) => {
		resizeCanvas(devicePixelSize.width, devicePixelSize.height);

		compositor.setSize(devicePixelSize);
		compositor.render();
	});

	particlesPass.onAfterRender(incrementRenderCount);
</script>

<Layout title="Bloom">
	<canvas></canvas>
</Layout>

<style>
	canvas {
		aspect-ratio: 3 / 2;
	}
</style>
