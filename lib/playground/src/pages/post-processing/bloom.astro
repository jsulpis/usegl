---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import { useEffectPass, useWebGLCanvas, useCompositeEffectPass } from "usegl";
  import { fragment, mipmapsShader, blurShader, combineShader } from "../../shaders/bloom";
  import { incrementRenderCount } from "../../components/renderCount";

  const mipmaps = useEffectPass({
    fragment: mipmapsShader,
    uniforms: {
      u_threshold: 0.2,
    },
  });

  const horizontalBlur = useEffectPass({
    fragment: blurShader,
    uniforms: {
      u_direction: [1, 0],
    },
  });

  const verticalBlur = useEffectPass({
    fragment: blurShader,
    uniforms: {
      u_direction: [0, 1],
    },
  });

  const combine = useEffectPass({
    fragment: combineShader,
    uniforms: {
      u_image: ({ inputPass }) => inputPass.target!.texture,
      u_bloomTexture: () => verticalBlur.target!.texture,
      u_mix: 0,
    },
  });

  const bloomEffect = useCompositeEffectPass({
    mipmaps,
    horizontalBlur,
    verticalBlur,
    combine,
  });

  bloomEffect.passes.combine.uniforms.u_mix = 1;

  const vignetteEffect = useEffectPass({
    fragment: /* glsl */ `
			uniform sampler2D uTexture;
			varying vec2 vUv;

			#define SIZE .6      // (0.0 - 1.0)
			#define ROUNDNESS .7 // (0.0 = rectangle, 1.0 = round)
			#define STRENGTH .6  // (0.0 - 1.0)

			float vignette() {
				vec2 centered = vUv * 2.0 - 1.0;
				float circDist = length(centered);
				float rectDist = max(abs(centered.x), abs(centered.y));
				float dist = mix(rectDist, circDist, ROUNDNESS);
				return 1. - smoothstep(SIZE, SIZE * 2., dist) * STRENGTH;
			}

			void main() {
				vec4 color = texture(uTexture, vUv);
        color.rgb *= vignette();
				gl_FragColor = color;
			}
		`,
  });

  const { onAfterRender } = useWebGLCanvas({
    canvas: "#glCanvas",
    fragment: fragment,
    postEffects: [vignetteEffect, bloomEffect],
  });

  onAfterRender(incrementRenderCount);
</script>

<Layout title="Bloom">
  <canvas id="glCanvas"></canvas>
</Layout>
