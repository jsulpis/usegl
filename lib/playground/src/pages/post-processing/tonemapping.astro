---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import {
    useEffectPass,
    useWebGLCanvas,
    loadTexture,
    acesToneMapping,
    reinhardToneMapping,
    hableToneMapping,
    neutralToneMapping,
    agxToneMapping,
    cineonToneMapping,
    linearToneMapping,
  } from "usegl";
  import { incrementRenderCount } from "../../components/renderCount";

  const testShader = /* glsl */ `
uniform float uExposure;

in vec2 vUv;
out vec4 fragColor;

vec3 hsl2rgb(vec3 hsl) {
  vec3 rgb = vec3(0.0);
  float c = (1.0 - abs(2.0 * hsl.z - 1.0)) * hsl.y;
  float x = c * (1.0 - abs(mod(hsl.x / 60.0, 2.0) - 1.0));
  float m = hsl.z - c * 0.5;

  if (hsl.x < 60.0) {
    rgb = vec3(c, x, 0.0);
  } else if (hsl.x < 120.0) {
    rgb = vec3(x, c, 0.0);
  } else if (hsl.x < 180.0) {
    rgb = vec3(0.0, c, x);
  } else if (hsl.x < 240.0) {
    rgb = vec3(0.0, x, c);
  } else if (hsl.x < 300.0) {
    rgb = vec3(x, 0.0, c);
  } else {
    rgb = vec3(c, 0.0, x);
  }

  return rgb + m;
}

void main() {
  float hue = mod(degrees(atan(vUv.x - 0.5, vUv.y - 0.5)), 360.0);
  float lightness = pow(1.0 - length(vUv - vec2(0.5)), 3.) - 0.1;
  float saturation = 1.0;

  vec3 color = hsl2rgb(vec3(hue, saturation, lightness * uExposure));

  if (vUv.y < 0.15) {
    color = vec3(vUv.x * uExposure);
  }

  fragColor = vec4(pow(color, vec3(2.2)), 1.0);
}
`;

  const { onAfterRender } = useWebGLCanvas({
    canvas: "#glCanvas",
    fragment: testShader,
    uniforms: {
      uExposure: 1.5,
    },
    postEffects: [
      // linearToneMapping(),
      // reinhardToneMapping(),
      // acesToneMapping(),
      // cineonToneMapping(),
      // neutralToneMapping(),
      // agxToneMapping(),
      hableToneMapping(),
    ],
  });

  onAfterRender(incrementRenderCount);
</script>

<Layout title="Tone Mapping">
  <canvas id="glCanvas"></canvas>
</Layout>
