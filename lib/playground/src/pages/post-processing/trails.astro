---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import { useWebGLCanvas, linearToneMapping, trails, bloom, useLoop } from "usegl";
  import { incrementRenderCount } from "../../components/renderCount";

  ["#glCanvas", "#glCanvas2", "#glCanvas3"].forEach((selector, i) => {
    const { render, uniforms } = useWebGLCanvas({
      canvas: selector,
      fragment: /* glsl */ `
      varying vec2 vUv;
      uniform float uTime;
  		uniform vec2 uResolution;

      #define PI 3.14159265359
      #define dotRadius 0.04
      #define dotColor vec4(1., .6, 0., 1.)
      #define circleRadius 0.2
      #define count 3
      #define speed 1.

      vec2 rotate(vec2 uv, float angle) {
        float cosA = cos(angle);
        float sinA = sin(angle);
        mat2 rotation = mat2(cosA, -sinA, sinA, cosA);
        return rotation * uv;
      }

  		void main() {
        vec2 uv = (vUv - .5) * uResolution / min(uResolution.x, uResolution.y);
        uv = rotate(uv, uTime * speed);
  			float circleMask = 0.;
        for (int i = 0; i < count; i++) {
          circleMask += 1. - step(dotRadius, distance(uv, rotate(vec2(circleRadius), float(i) * 2. * PI / float(count))));
        }
        vec4 color = mix(vec4(0), dotColor, step(.1, circleMask)) * 1.;
        // color.a = 1.;

  			gl_FragColor = pow(color, vec4(2.2));
  		}
    `,
      uniforms: {
        uTime: 0,
      },
      postEffects: [
        bloom(),
        trails(
          i === 0
            ? {}
            : i === 1
              ? {
                  erosion: 0.4,
                  tailColor: [0, 1, 1, 1],
                  tailColorFalloff: 0.45,
                }
              : {
                  fadeout: 0.1,
                  erosion: 0.6,
                  tailColor: [1, 0, 0, 1],
                  tailColorFalloff: 0.5,
                }
        ),
        linearToneMapping({ exposure: 3 }),
      ],
    });

    let framesRendered = 0;

    const { pause } = useLoop(({}) => {
      if (++framesRendered > 30) {
        pause();
        return;
      }
      uniforms.uTime += 0.03;
      render();
      incrementRenderCount();
    });
  });
</script>

<Layout title="Trails">
  <div class="container">
    <canvas id="glCanvas"></canvas>
    <canvas id="glCanvas2"></canvas>
    <canvas id="glCanvas3"></canvas>
  </div>
</Layout>

<style>
  .container {
    display: grid;
    width: 95%;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 1rem;
    padding: 1rem;
  }

  canvas {
    width: 100%;

    background-image: linear-gradient(
        45deg,
        #555 25%,
        transparent 25%,
        transparent 75%,
        #555 75%,
        #555
      ),
      linear-gradient(45deg, #555 25%, transparent 25%, transparent 75%, #555 75%, #555);
    background-size: 20px 20px;
    background-position:
      0 0,
      10px 10px;

    &:nth-of-type(2) {
      background: black;
    }
    &:nth-of-type(3) {
      background: white;
    }
  }
</style>
